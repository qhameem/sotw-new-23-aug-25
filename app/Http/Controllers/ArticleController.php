<?php

namespace App\Http\Controllers;

use App\Models\Article;
use App\Models\ArticleCategory;
use App\Models\ArticleTag;
use App\Models\Category;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class ArticleController extends Controller
{
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $categories = Category::join('category_types', 'categories.id', '=', 'category_types.category_id')
            ->where('category_types.type_id', 1)
            ->orderBy('name')
            ->get('categories.*');
        return view('articles.create', compact('categories'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        Log::info('--- New Article Creation Request ---');
        Log::info('Raw Request Data:', $request->all());

        $validator = Validator::make($request->all(), [
            'title' => 'required|string|max:255',
            'slug' => 'nullable|string|max:255|unique:articles,slug',
            'content' => 'required|string',
            'meta_description' => 'required|string|max:160',
            'status' => 'required|in:draft,published',
            'featured_image_path' => 'nullable|string|max:255',
            'category_id' => 'required|exists:categories,id',
        ]);

        if ($validator->fails()) {
            Log::error('Article validation failed.', $validator->errors()->toArray());
            return redirect()->back()
                        ->withErrors($validator)
                        ->withInput();
        }

        $validatedData = $validator->validated();
        Log::info('Validated Data:', $validatedData);

        try {
            $article = new Article();
            $article->user_id = Auth::id();
            $article->title = $validatedData['title'];
            $article->slug = $validatedData['slug'] ?? null; // Slug will be generated by the model if null
            $article->content = $validatedData['content'];
            $article->meta_description = $validatedData['meta_description'];
            $article->status = $validatedData['status'];
            $article->featured_image_path = $validatedData['featured_image_path'] ?? null;

            if ($article->status === 'published') {
                $article->published_at = now();
            }

            Log::info('Article model state before saving:', $article->toArray());

            $article->save();

            // The model's 'saving' event will handle slug generation if it's empty.
            // After saving, we can attach the category.
            $article->categories()->attach($validatedData['category_id']);

            Log::info("Article created successfully with ID: {$article->id}");

            return redirect()->route('articles.index')->with('success', 'Article created successfully.');

        } catch (\Exception $e) {
            Log::critical('Failed to create article.', [
                'error_message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return redirect()->back()->with('error', 'There was a critical error saving your article. Please try again.')->withInput();
        }
    }

    public function index(Request $request)
    {
        $posts = Article::select('articles.*')
            ->where('status', 'published')
            ->where('published_at', '<=', now())
            ->with('author', 'categories', 'tags')
            ->latest('published_at')
            ->paginate(10);

        $title = 'Articles - Software on the web';

        return view('articles.index', compact('posts', 'title'));
    }

    public function show(Article $article)
    {
        if ($article->status !== 'published' || $article->published_at > now()) {
            abort(404);
        }
        $article->load('author', 'categories', 'tags');
        return view('articles.show', ['post' => $article]);
    }

    public function category(ArticleCategory $articleCategory)
    {
        $posts = $articleCategory->articles()
            ->where('status', 'published')
            ->where('published_at', '<=', now())
            ->with('author', 'categories', 'tags')
            ->latest('published_at')
            ->paginate(10);

        return view('articles.category', ['posts' => $posts, 'articleCategory' => $articleCategory]);
    }

    public function tag(ArticleTag $articleTag)
    {
        $posts = $articleTag->articles()
            ->where('status', 'published')
            ->where('published_at', '<=', now())
            ->with('author', 'categories', 'tags')
            ->latest('published_at')
            ->paginate(10);

        return view('articles.tag', ['posts' => $posts, 'articleTag' => $articleTag]);
    }

    public function search(Request $request)
    {
        $query = $request->input('query');
        $posts = Article::where('status', 'published')
            ->where('published_at', '<=', now())
            ->where(function ($q) use ($query) {
                $q->where('title', 'like', "%{$query}%")
                  ->orWhere('content', 'like', "%{$query}%");
            })
            ->with('author', 'categories', 'tags')
            ->latest('published_at')
            ->paginate(10);

        return view('articles.search', ['posts' => $posts, 'query' => $query]);
    }

    public function feed()
    {
        $posts = Article::where('status', 'published')
            ->where('published_at', '<=', now())
            ->orderBy('published_at', 'desc')
            ->limit(20)
            ->get();

        return response()->view('articles.feed', [
            'posts' => $posts,
        ], 200)->header('Content-Type', 'application/xml');
    }
    
    public function myArticles()
    {
        /** @var \App\Models\User $user */
        $user = Auth::user();
        $articles = $user->articles()->latest()->paginate(10);
        return view('articles.my-articles', compact('articles'));
    }
}