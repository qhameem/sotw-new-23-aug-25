diff --git a/app/Http/Controllers/TodoListController.php b/app/Http/Controllers/TodoListController.php
index e46b5bd..7604c59 100644
--- a/app/Http/Controllers/TodoListController.php
+++ b/app/Http/Controllers/TodoListController.php
@@ -25,7 +25,12 @@ public function index()
         $seoSettings = PageMetaTag::where('path', '/free-todo-list-tool')->first();
         $meta_title = $seoSettings->meta_title ?? 'Free To Do List Tool - Software on the Web';
         $meta_description = $seoSettings->meta_description ?? '';
-        $lists = TodoList::with('items')->get();
+        $lists = [];
+        if (Auth::check()) {
+            $lists = TodoList::where('user_id', Auth::id())->with('items')->get();
+        } else {
+            $lists = session('todo_lists', []);
+        }
 
         return view('todolists.index', compact('meta_title', 'meta_description', 'lists'));
     }
@@ -40,36 +45,51 @@ public function store(Request $request)
 
         if (Auth::check()) {
             $list->user_id = Auth::id();
+            $list->save();
+            return response()->json($list->load('items'));
+        } else {
+            // For guest users, add to session
+            $lists = session('todo_lists', []);
+            $list->id = time(); // Assign a temporary unique ID
+            $list->items = [];
+            $lists[] = $list;
+            session(['todo_lists' => $lists]);
+            return response()->json($list);
         }
-
-        $list->save();
-
-        return response()->json($list->load('items'));
     }
 
     public function update(Request $request, TodoList $todoList)
     {
         if (Auth::check()) {
             $this->authorize('update', $todoList);
+            $todoList->update($request->only('title'));
+            return response()->json($todoList->load('items'));
+        } else {
+            $lists = session('todo_lists', []);
+            foreach ($lists as $key => $list) {
+                if ($list->id == $request->route('todoList')) {
+                    $lists[$key]->title = $request->title;
+                    break;
+                }
+            }
+            session(['todo_lists' => $lists]);
+            return response()->json($lists);
         }
-
-        $request->validate([
-            'title' => 'required|string|max:255',
-        ]);
-
-        $todoList->update($request->only('title'));
-
-        return response()->json($todoList->load('items'));
     }
 
     public function destroy(TodoList $todoList)
     {
         if (Auth::check()) {
             $this->authorize('delete', $todoList);
+            $todoList->delete();
+        } else {
+            $lists = session('todo_lists', []);
+            $lists = array_filter($lists, function ($list) use ($todoList) {
+                return $list->id != $todoList->id;
+            });
+            session(['todo_lists' => $lists]);
         }
 
-        $todoList->delete();
-
         return response()->json(['success' => true]);
     }
 
@@ -86,50 +106,69 @@ public function storeItem(Request $request, TodoList $todoList)
     {
         if (Auth::check()) {
             $this->authorize('update', $todoList);
+            $item = $todoList->items()->create($request->all());
+            return response()->json($item);
+        } else {
+            $lists = session('todo_lists', []);
+            foreach ($lists as $key => $list) {
+                if ($list->id == $todoList->id) {
+                    $item = new \stdClass();
+                    $item->id = time();
+                    $item->title = $request->title;
+                    $item->completed = false;
+                    $item->color = $request->color ?? 'gray';
+                    $item->deadline = $request->deadline;
+                    $lists[$key]->items[] = $item;
+                    break;
+                }
+            }
+            session(['todo_lists' => $lists]);
+            return response()->json($item);
         }
-
-        $request->validate([
-            'title' => 'required|string|max:255',
-            'color' => 'nullable|string|max:255',
-            'deadline' => 'nullable|date',
-        ]);
-
-        $item = $todoList->items()->create([
-            'title' => $request->title,
-            'color' => $request->color ?? 'gray',
-            'deadline' => $request->deadline,
-        ]);
-
-        return response()->json($item);
     }
 
     public function updateItem(Request $request, TodoListItem $todoListItem)
     {
         if (Auth::check()) {
             $this->authorize('update', $todoListItem->todoList);
+            $todoListItem->update($request->all());
+            return response()->json($todoListItem);
+        } else {
+            $lists = session('todo_lists', []);
+            foreach ($lists as $listKey => $list) {
+                foreach ($list->items as $itemKey => $item) {
+                    if ($item->id == $todoListItem->id) {
+                        $lists[$listKey]->items[$itemKey]->title = $request->input('title', $item->title);
+                        $lists[$listKey]->items[$itemKey]->completed = $request->input('completed', $item->completed);
+                        $lists[$listKey]->items[$itemKey]->color = $request->input('color', $item->color);
+                        $lists[$listKey]->items[$itemKey]->deadline = $request->input('deadline', $item->deadline);
+                        break 2;
+                    }
+                }
+            }
+            session(['todo_lists' => $lists]);
+            return response()->json($lists);
         }
-
-        $request->validate([
-            'title' => 'sometimes|string|max:255',
-            'completed' => 'sometimes|boolean',
-            'color' => 'nullable|string|max:255',
-            'deadline' => 'nullable|date',
-        ]);
-
-        $todoListItem->update($request->only('title', 'completed', 'color', 'deadline'));
-
-        return response()->json($todoListItem);
     }
 
     public function destroyItem(TodoListItem $todoListItem)
     {
         if (Auth::check()) {
-            $this->authorize('update',
-            $todoListItem->todoList);
+            $this->authorize('update', $todoListItem->todoList);
+            $todoListItem->delete();
+        } else {
+            $lists = session('todo_lists', []);
+            foreach ($lists as $listKey => $list) {
+                foreach ($list->items as $itemKey => $item) {
+                    if ($item->id == $todoListItem->id) {
+                        unset($lists[$listKey]->items[$itemKey]);
+                        break 2;
+                    }
+                }
+            }
+            session(['todo_lists' => $lists]);
         }
 
-        $todoListItem->delete();
-
         return response()->json(['success' => true]);
     }
 }
diff --git a/resources/views/layouts/todolist.blade.php b/resources/views/layouts/todolist.blade.php
index c5b990f..c42dbcf 100644
--- a/resources/views/layouts/todolist.blade.php
+++ b/resources/views/layouts/todolist.blade.php
@@ -68,10 +68,17 @@
     data-is-authenticated="{{ Auth::check() ? '1' : '0' }}"
     data-login-url="{{ route('login') }}"
     data-csrf-token="{{ csrf_token() }}">
-    <div class="fixed top-0 right-0 p-4">
-        @include('partials._right-sidebar-usermenu')
+    <div class="fixed top-5 left-0 right-0 z-10">
+        <div class="sm:max-w-xl md:max-w-[640px] lg:max-w-[640px] xl:max-w-[640px] mx-auto px-8 border bg-white opacity-90 rounded-full">
+            <div class="flex justify-between items-center py-4">
+                <h1 class="text-3xl font-medium text-gray-800">
+                    Free Todo List App
+                </h1>
+                @include('partials._right-sidebar-usermenu')
+            </div>
+        </div>
     </div>
-    <div class="min-h-screen flex items-center justify-center">
+    <div class="min-h-screen flex items-center justify-center pt-16">
         <div class="w-full max-w-2xl mx-auto p-4">
             @yield('content')
     
